[Commands]
1\Automatic=true
1\Command="copyq:\nvar tabName = 'Selections'\nsetData(mimeOutputTab, tabName)"
1\Icon=\xf245
1\MatchCommand="copyq: dataFormats().indexOf(mimeClipboardMode) == -1 && fail()"
1\Name=Store Mouse Selections in Separate Tab
10\Command=copyq: plugins.itempinned.unpin()
10\Icon=\xf08d
10\InMenu=true
10\Input=application/x-copyq-item-pinned
10\Name=Unpin
11\Automatic=true
11\Icon=\xf03e
11\Input=image/png
11\Name=Move Images to Other Tab
11\Remove=true
11\Tab=&Images
12\Command=copyq: plugins.itemtags.tag(decodeURIComponent('Important'))
12\Icon=\xf02b
12\InMenu=true
12\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) && fail()
12\Name=Tag as \x201cImportant\x201d
13\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
13\Icon=\xf02b
13\InMenu=true
13\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
13\Name=Remove tag \x201cImportant\x201d
14\Command=copyq: plugins.itemtags.tag()
14\Icon=\xf02b
14\InMenu=true
14\Name=Add a Tag
15\Command=copyq: plugins.itemtags.untag()
15\Icon=\xf02b
15\InMenu=true
15\Input=application/x-copyq-tags
15\Name=Remove a Tag
16\Command=copyq: plugins.itemtags.clearTags()
16\Icon=\xf02b
16\InMenu=true
16\Input=application/x-copyq-tags
16\Name=Clear all tags
2\Automatic=true
2\Command="copyq:\nvar time = dateString('yyyy-MM-dd hh:mm:ss')\nsetData('application/x-copyq-user-copy-time', time)\n\nvar tagsMime = 'application/x-copyq-tags'\nvar tags = str(data(tagsMime)) + ', ' + time\nsetData(tagsMime, tags)"
2\Icon=\xf017
2\Name=Store Copy Time
3\Command="copyq:\nvar time = dateString('yyyy-MM-dd hh:mm:ss')\ncopy(time)\npaste()"
3\GlobalShortcut=meta+alt+t
3\Icon=\xf017
3\IsGlobalShortcut=true
3\Name=Paste Current Time
4\Command="copyq:\nseconds = 2;\npopup(\"\", clipboard(), seconds * 1000)"
4\GlobalShortcut=meta+alt+c
4\IsGlobalShortcut=true
4\Name=Show clipboard
5\Command="copyq:\n// Name for tab for storing matching items.\nvar search_tab_name = \"Search\"\n\n// Returns true iff item at index matches regex.\nfunction item_matches(item_index, re)\n{\n    var item = getitem(j)\n    var note = str(item[mimeItemNotes])\n    var text = str(item[mimeText])\n    return text && (re.test(text) || re.test(note))\n}\n\n// Ask for search expression.\nvar match = dialog(\"Search\")\nif (!match)\n  abort()\nvar re = new RegExp(match,'i') // 'i' case-insensitive\n\n// Clear tab with results.\ntry {\n  removeTab(search_tab_name)\n} catch (e) {}\n\n// Search all tabs.\nvar tab_names = tab()\nfor (var i in tab_names) {\n  var tab_name = tab_names[i]\n  tab(tab_name)\n  var item_count = count()\n\n  // Search all items in tab.\n  for (var j = 0; j < item_count; ++j) {\n    // Add matching item to tab with results.\n    if (item_matches(j, re)) {\n      var item = getItem(j)\n      tab(search_tab_name)\n      setItem(j, item)\n      tab(tab_name)\n    }\n  }\n}\n\nshow(search_tab_name)"
5\Icon=\xf002
5\InMenu=true
5\Name=Search All Tabs
5\Shortcut=ctrl+shift+f
6\Automatic=true
6\Command="copyq:\n    item = unpack(input())\n    window_title = item[\"application/x-copyq-owner-window-title\"]\n    if (window_title) {\n        // Remove the part of window title before dash\n        // (it's usually document name or URL).\n        tabname = str(window_title).replace(/.* (-|\x2013) /, \"\")\n        tab(\"Windows/\" + tabname)\n        write(\"application/x-copyq-item\", input())\n    }\n    "
6\Enable=false
6\Icon=\xf009
6\Input=application/x-copyq-item
6\Name=Window Tabs
7\Automatic=true
7\Command="copyq:\nvar tabName = '&url'\n\nfunction lower(data) {\n  return str(data).toLowerCase()\n}\n\nfunction findHeader(reply, headerName) {\n  reply.data // fetches data and headers\n  var headers = reply.headers\n  for (var i in headers) {\n    var header = headers[i]\n    if (lower(header[0]) === headerName)\n       return header[1]\n  }\n  return ''\n}\n\nfunction isHtml(reply) {\n  var header = findHeader(reply, 'content-type')\n  if (header)\n    return lower(header).indexOf(mimeHtml) === 0\n  return false\n}\n\nfunction fetchContent(url, maxRedirects) {\n  if (maxRedirects === undefined)\n    maxRedirects = 4\n\n  var reply = networkGet(url)\n  if (maxRedirects == 0)\n    return reply\n  var header = findHeader(reply, 'location')\n  if (header)\n    return fetchContent(header, maxRedirects - 1)\n\n  return reply\n}\n\nfunction grep(content, re) {\n  return content ? (re.exec(content) || [])[1] : ''\n}\n\nfunction getTitle(content) {\n  var title = grep(content, /<title[^>]*>([^<]*)<\\/title>/i)\n  return title ? title.trim() : ''\n}\n\nfunction getFavicon(content) {\n  var iconLine = grep(content, /<link([^>]*rel=[\"'](?:shortcut )?icon[\"'][^>]*)/i)\n  var icon = grep(iconLine, /href=[\"']([^\"']*)/i)\n\n  if (!icon)\n    return ''\n\n  // Icon path can be complete URL.\n  if (icon.indexOf('://') != -1)\n    return fetchContent(icon).data\n\n  // Icon path can be missing protocol.\n  if (icon.substr(0, 2) === '//') {\n    var i = url.search(/\\/\\//)\n    var protocol = (i == -1) ? 'http:' : url.substr(0, i)\n    return fetchContent(protocol + icon).data\n  }\n\n  // Icon path can be relative to host URL.\n  if (icon[0] === '/') {\n    var baseUrl = url.substr(0, url.search(/[^\\/:](\\/|$)/) + 1)\n    return fetchContent(baseUrl + icon).data\n  }\n\n  // Icon path can be relative to current URL.\n  var baseUrl = url.substr(0, url.lastIndexOf('/') + 1)\n  return fetchContent(baseUrl + icon).data\n}\n\nvar url = str(input()).trim()\n\n// URL already added? (Just check the top of the list.)\nif (url === str(read(0)))\n  abort()\n\n// Fetch HTML.\nvar reply = fetchContent(url)\nif (isHtml(reply)) {\n  var content = str(reply.data)\n  var title = getTitle(content)\n  var icon = getFavicon(content)\n\n  setData(mimeItemNotes, title || '')\n  setData('application/x-copyq-item-icon', icon)\n}\n\nsetData(mimeOutputTab, tabName)"
7\Icon=\xf0c1
7\Input=text/plain
7\Match=^https?://
7\Name=Tab for URLs with Title and Icon
8\Automatic=true
8\Command="copyq:\nvar window = str(data('application/x-copyq-owner-window-title'))\nvar tagsMime = 'application/x-copyq-tags'\nvar tags = str(data(tagsMime)) + ', ' + window\nsetData(tagsMime, tags)"
8\Icon=\xf009
8\Name=Store Window Title
9\Command=copyq: plugins.itempinned.pin()
9\Icon=\xf08d
9\InMenu=true
9\Input=!OUTPUT
9\Name=Pin
9\Output=application/x-copyq-item-pinned
size=16
